class Something:

    #--------- Constructor --------
    def __init__(resolution, text_colour, text_background_colour, alternative_colour, words_from_user, display_words_from_user, context_location, user_input_text, display_user_input_text, name_of_context):

        self.resolution = resolution
        self._text_colour = text_colour
        self.text_background_colour = text_background_colour
        self.alternative_colour = alternative_colour
        self.__words_from_user = words_from_user
        self.display_words_from_user = display_words_from_user
        self.context_location = context_location
        self.user_input_text = user_input_text
        self.display_user_input_text = display_user_input_text
        self.__name_of_context = name_of_context


    #----------- Getters ----------
    def get_resolution(self):
        return self.resolution

    def get_text_colour(self):
        return self._text_colour

    def get_text_background_colour(self):
        return self.text_background_colour

    def get_alternative_colour(self):
        return self.alternative_colour

    def get_words_from_user(self):
        return self.__words_from_user

    def get_display_words_from_user(self):
        return self.display_words_from_user

    def get_context_location(self):
        return self.context_location

    def get_user_input_text(self):
        return self.user_input_text

    def get_display_user_input_text(self):
        return self.display_user_input_text

    def get_name_of_context(self):
        return self.__name_of_context



    #----------- Setters ----------
    def set_resolution(self, resolution):
        self.resolution = resolution

    def set_text_colour(self, text_colour):
        self._text_colour = text_colour

    def set_text_background_colour(self, text_background_colour):
        self.text_background_colour = text_background_colour

    def set_alternative_colour(self, alternative_colour):
        self.alternative_colour = alternative_colour

    def set_words_from_user(self, words_from_user):
        self.__words_from_user = words_from_user

    def set_display_words_from_user(self, display_words_from_user):
        self.display_words_from_user = display_words_from_user

    def set_context_location(self, context_location):
        self.context_location = context_location

    def set_user_input_text(self, user_input_text):
        self.user_input_text = user_input_text

    def set_display_user_input_text(self, display_user_input_text):
        self.display_user_input_text = display_user_input_text

    def set_name_of_context(self, name_of_context):
        self.__name_of_context = name_of_context



#------------------------------



#==============================
# Use the code above or the code below, depending on whether you want to use property decorators as below or not.
#==============================

class Something:

    #--------- Constructor --------
    def __init__(resolution, text_colour, text_background_colour, alternative_colour, words_from_user, display_words_from_user, context_location, user_input_text, display_user_input_text, name_of_context):

        self.resolution = resolution  # This is not an attribute assignment; it calls the setter.
        self.text_colour = text_colour  # This is not an attribute assignment; it calls the setter.
        self.text_background_colour = text_background_colour  # This is not an attribute assignment; it calls the setter.
        self.alternative_colour = alternative_colour  # This is not an attribute assignment; it calls the setter.
        self.words_from_user = words_from_user  # This is not an attribute assignment; it calls the setter.
        self.display_words_from_user = display_words_from_user  # This is not an attribute assignment; it calls the setter.
        self.context_location = context_location  # This is not an attribute assignment; it calls the setter.
        self.user_input_text = user_input_text  # This is not an attribute assignment; it calls the setter.
        self.display_user_input_text = display_user_input_text  # This is not an attribute assignment; it calls the setter.
        self.name_of_context = name_of_context  # This is not an attribute assignment; it calls the setter.


    #----------- Getters ----------
    @property
    def resolution(self):
        return self.resolution

    @property
    def text_colour(self):
        return self._text_colour

    @property
    def text_background_colour(self):
        return self.text_background_colour

    @property
    def alternative_colour(self):
        return self.alternative_colour

    @property
    def words_from_user(self):
        return self.__words_from_user

    @property
    def display_words_from_user(self):
        return self.display_words_from_user

    @property
    def context_location(self):
        return self.context_location

    @property
    def user_input_text(self):
        return self.user_input_text

    @property
    def display_user_input_text(self):
        return self.display_user_input_text

    @property
    def name_of_context(self):
        return self.__name_of_context



    #----------- Setters ----------
    @resolution.setter
    def resolution(self, value):
        self.resolution = value

    @text_colour.setter
    def text_colour(self, value):
        self._text_colour = value

    @text_background_colour.setter
    def text_background_colour(self, value):
        self.text_background_colour = value

    @alternative_colour.setter
    def alternative_colour(self, value):
        self.alternative_colour = value

    @words_from_user.setter
    def words_from_user(self, value):
        self.__words_from_user = value

    @display_words_from_user.setter
    def display_words_from_user(self, value):
        self.display_words_from_user = value

    @context_location.setter
    def context_location(self, value):
        self.context_location = value

    @user_input_text.setter
    def user_input_text(self, value):
        self.user_input_text = value

    @display_user_input_text.setter
    def display_user_input_text(self, value):
        self.display_user_input_text = value

    @name_of_context.setter
    def name_of_context(self, value):
        self.__name_of_context = value



#------------------------------


